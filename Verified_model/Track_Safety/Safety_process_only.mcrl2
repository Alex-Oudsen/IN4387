sort Lights = struct LIGHTS_ON | LIGHTS_OFF; 
     Safety = struct TRAIN | NO_TRAIN;
     Track = struct NONE | WB | EB;
     TrackID = struct NORTH | SOUTH;

act recvLights2Safety: Lights;
    sendSafety2Lights, sendSafety2Barriers: Safety;
    recvTrack2Safety: TrackID # Track;

proc safety(northSafety: Safety, southSafety: Safety) =
     (northSafety == NO_TRAIN) -> (recvTrack2Safety(NORTH, EB) + recvTrack2Safety(NORTH, WB)).safety(northSafety = TRAIN)
     + (southSafety == NO_TRAIN) -> (recvTrack2Safety(SOUTH, EB) + recvTrack2Safety(SOUTH, WB)).safety(southSafety = TRAIN)
     + (northSafety == TRAIN && southSafety == NO_TRAIN) -> recvTrack2Safety(NORTH, NONE).sendSafety2Barriers(NO_TRAIN).recvLights2Safety(LIGHTS_OFF).safety(northSafety = NO_TRAIN)
     + (northSafety == NO_TRAIN && southSafety == TRAIN) -> recvTrack2Safety(SOUTH, NONE).sendSafety2Barriers(NO_TRAIN).recvLights2Safety(LIGHTS_OFF).safety(southSafety = NO_TRAIN)
     + (northSafety == TRAIN && southSafety == TRAIN) -> (recvTrack2Safety(NORTH, NONE).safety(northSafety = NO_TRAIN) + recvTrack2Safety(SOUTH, NONE).safety(southSafety = NO_TRAIN))
     + (northSafety == TRAIN || southSafety == TRAIN) -> sendSafety2Lights(TRAIN).safety();

init safety(NO_TRAIN, NO_TRAIN);