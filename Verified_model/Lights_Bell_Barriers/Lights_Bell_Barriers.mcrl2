sort Lights = struct LIGHTS_ON | LIGHTS_OFF;
     Bell = struct BELL_ON | BELL_OFF;
     Barriers = struct BARRIERS_SET | BARRIERS_RAISED;
     Safety = struct TRAIN | TRAIN_CROSSING | NO_TRAIN;

act setLights, sendLights2Bell, recvLights2Bell, comm_Lights2Bell, sendLights2Safety: Lights;
    setBell, sendBell2Lights, recvBell2Lights, comm_Bell2Lights: Bell;
    sendBell2Barriers, recvBell2Barriers, comm_Bell2Barriers: Bell;
    setBarriers, sendBarriers2Bell, recvBarriers2Bell, comm_Barriers2Bell, sendBarriers2Track: Barriers;
    recvSafety2Lights, recvSafety2Barriers: Safety;

proc lights(lightStatus: Lights) = 
     (lightStatus == LIGHTS_OFF) -> (recvSafety2Lights(TRAIN).setLights(LIGHTS_ON).lights(LIGHTS_ON) + sendLights2Safety(lightStatus).lights())
     + (lightStatus == LIGHTS_ON) -> sendLights2Bell(lightStatus).recvBell2Lights(BELL_OFF).setLights(LIGHTS_OFF).lights(LIGHTS_OFF);

proc bell(bellStatus: Bell) = 
     (bellStatus == BELL_OFF) -> (recvLights2Bell(LIGHTS_ON).setBell(BELL_ON).bell(BELL_ON) + sendBell2Lights(bellStatus).bell())
     + (bellStatus == BELL_ON) -> sendBell2Barriers(bellStatus).recvBarriers2Bell(BARRIERS_RAISED).setBell(BELL_OFF).bell(BELL_OFF);

proc barriers(barrierStatus: Barriers) = 
     (barrierStatus == BARRIERS_RAISED) -> (recvBell2Barriers(BELL_ON).setBarriers(BARRIERS_SET).barriers(BARRIERS_SET) + sendBarriers2Bell(barrierStatus).barriers())
     + (barrierStatus == BARRIERS_SET) -> sendBarriers2Track(barrierStatus).recvSafety2Barriers(NO_TRAIN).setBarriers(BARRIERS_RAISED).barriers(BARRIERS_RAISED);

init 
     hide({comm_Lights2Bell, comm_Bell2Lights, comm_Bell2Barriers, comm_Barriers2Bell},
          allow({comm_Lights2Bell, comm_Bell2Lights, comm_Bell2Barriers, comm_Barriers2Bell,
                 recvSafety2Lights, recvSafety2Barriers, sendLights2Safety, sendBarriers2Track,
                 setLights, setBell, setBarriers},
               comm({sendLights2Bell|recvLights2Bell -> comm_Lights2Bell,
                     sendBell2Lights|recvBell2Lights -> comm_Bell2Lights,
                     sendBell2Barriers|recvBell2Barriers -> comm_Bell2Barriers,
                     sendBarriers2Bell|recvBarriers2Bell -> comm_Barriers2Bell},
                        lights(LIGHTS_OFF)
                        ||bell(BELL_OFF)
                        ||barriers(BARRIERS_RAISED)
               )
          )
     );