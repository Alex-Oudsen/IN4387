sort Lights = struct LIGHTS_ON | LIGHTS_OFF;
     Bell = struct BELL_ON | BELL_OFF | BELL_CHECK;
     Barriers = struct BARRIERS_UP | BARRIERS_DOWN;
     TrainTrack = struct TRAIN_ARRIVING | NO_TRAIN;
     SingleTrack = struct NONE | EB | WB;
     Sensor = struct TRIPPED | IDLE;

act setLightStatus, getLightStatus, comm_lightStatus: Lights;
    setBellStatus, getBellStatus, comm_bellStatus: Bell;
    setBarrierStatus, getBarrierStatus, comm_barrierStatus: Barriers;
    setTrackStatus, getTrackStatus, comm_trackStatus: TrainTrack;
    tracksensor1e, tracksensor1w, tracksensor2e, tracksensor2w: Sensor;
    setTrack1Status, getTrack1Status, setTrack2Status, getTrack2Status, comm_track1Status, comm_track2Status: SingleTrack;

proc lights(lightStatus: Lights) = 
     (lightStatus == LIGHTS_OFF) -> getTrackStatus(TRAIN_ARRIVING).lights(LIGHTS_ON)
     + (lightStatus == LIGHTS_ON) -> getBellStatus(BELL_OFF).(getTrackStatus(TRAIN_ARRIVING).lights(LIGHTS_ON) + getTrackStatus(NO_TRAIN).lights(LIGHTS_OFF))
     + setLightStatus(lightStatus).lights();

proc bell(bellStatus: Bell) = 
     (bellStatus == BELL_OFF) -> getLightStatus(LIGHTS_ON).bell(BELL_CHECK)
     + (bellStatus == BELL_ON) -> getBarrierStatus(BARRIERS_UP).bell(BELL_CHECK)
     + (bellStatus == BELL_CHECK) -> getTrackStatus(NO_TRAIN).bell(BELL_OFF)
     + (bellStatus == BELL_CHECK) -> getTrackStatus(TRAIN_ARRIVING).bell(BELL_ON)
     + (bellStatus != BELL_CHECK) -> setBellStatus(bellStatus).bell();

proc barriers(barrierStatus: Barriers) = 
     (barrierStatus == BARRIERS_UP) -> getBellStatus(BELL_ON).(getTrackStatus(NO_TRAIN).barriers(BARRIERS_UP) + getTrackStatus(TRAIN_ARRIVING).barriers(BARRIERS_DOWN))
     + (barrierStatus == BARRIERS_DOWN) -> getTrackStatus(NO_TRAIN).barriers(BARRIERS_UP)
     + setBarrierStatus(barrierStatus).barriers();

proc track1(track1Status: SingleTrack) = 
     (track1Status == NONE) -> tracksensor1e(TRIPPED).track1(WB)
     + (track1Status == NONE) -> tracksensor1w(TRIPPED).track1(EB)
     + (track1Status == EB) -> tracksensor1e(TRIPPED).track1(NONE)
     + (track1Status == WB) -> tracksensor1w(TRIPPED).track1(NONE)
     + setTrack1Status(track1Status).track1();

proc track2(track2Status: SingleTrack) = 
     (track2Status == NONE) -> tracksensor2e(TRIPPED).track2(WB)
     + (track2Status == NONE) -> tracksensor2w(TRIPPED).track2(EB)
     + (track2Status == EB) -> tracksensor2e(TRIPPED).track2(NONE)
     + (track2Status == WB) -> tracksensor2w(TRIPPED).track2(NONE)
     + setTrack2Status(track2Status).track2();

proc safety(trackStatus: TrainTrack, arriving_on_1: Bool, arriving_on_2: Bool) = 
     (trackStatus == NO_TRAIN) -> ((getTrack1Status(EB) + getTrack1Status(WB)).safety(trackStatus = TRAIN_ARRIVING,
     arriving_on_1 = true) + (getTrack2Status(EB) + getTrack2Status(WB)).safety(trackStatus = TRAIN_ARRIVING, arriving_on_2 = true))
     + (arriving_on_1 == true && arriving_on_2 == false) -> ((getTrack2Status(EB) + getTrack2Status(WB)).safety(arriving_on_2 = true) +
     getTrack1Status(NONE).safety(trackStatus = NO_TRAIN, arriving_on_1 = false))
     + (arriving_on_1 == false && arriving_on_2 == true) -> ((getTrack1Status(EB) + getTrack1Status(WB)).safety(arriving_on_1 = true) +
     getTrack2Status(NONE).safety(trackStatus = NO_TRAIN, arriving_on_2 = false))
     + (arriving_on_1 == true && arriving_on_2 == true) -> getTrack1Status(NONE).safety(arriving_on_1 = false)
     + (arriving_on_1 == true && arriving_on_2 == true) -> getTrack2Status(NONE).safety(arriving_on_2 = false)
     + setTrackStatus(trackStatus).safety();

init 
     hide({comm_lightStatus, comm_bellStatus, comm_barrierStatus, comm_trackStatus,
           comm_track1Status, comm_track2Status},
          allow({comm_lightStatus, comm_bellStatus, comm_barrierStatus, comm_trackStatus,
                 tracksensor1e, tracksensor1w, tracksensor2e, tracksensor2w,
                 comm_track1Status, comm_track2Status},
               comm({setLightStatus|getLightStatus -> comm_lightStatus,
                     setBellStatus|getBellStatus -> comm_bellStatus,
                     setBarrierStatus|getBarrierStatus -> comm_barrierStatus,
                     setTrackStatus|getTrackStatus -> comm_trackStatus,
                     setTrack1Status|getTrack1Status -> comm_track1Status,
                     setTrack2Status|getTrack2Status -> comm_track2Status},
                        lights(LIGHTS_OFF)
                        ||bell(BELL_OFF)
                        ||barriers(BARRIERS_UP)
                        ||track1(NONE)
                        ||track2(NONE)
                        ||safety(NO_TRAIN, false, false)
               )
          )
     );